Is R fit to create reproducible results?
================================================================================
author: Stephan Porz, @data_raccoon, data scientist at eyeo
date: 2017-06-09, Köln R User Group meetup
font-family: 'Linux Biolinum O'
autosize: true

Reproducibility
================================================================================
```{r, echo=FALSE, include=FALSE, eval=FALSE}
# here goes the story from README.md
```


Why reproducibility
================================================================================
* re-use existing code
* regularly run a script
* applications
* share data products with others


Excursion: proper sharing of research (and applications)
================================================================================
type: sub-section
* show evidence of result correctness
* enable others to use methods and results

**Guide: reproducibility in science**
* [http://ropensci.github.io/reproducibility-guide](http://ropensci.github.io/reproducibility-guide)
* principles for many fields
* advice for various tasks


Main problem: heterogenous systems
================================================================================
### Various states
* OS: Windows, Mac, Linux
* OS versions: Ubuntu 14.04 LTS, Ubuntu 17.04
* R versions: R 3.0.2, R 3.3.3
* R packages: dplyr 0.5.0, tidyr 0.6.1

### Evolving systems
* update OS, R, R packages
  * features, security
* fresh installation


Background: eyeo & @data_raccoon
================================================================================
type: prompt

![](https://eyeo.com/images/people/jessica.png) ![](https://eyeo.com/images/people/pomogajko.png) ![](https://eyeo.com/images/people/porz.png)

### Data scientist, team of three
* psychology, economics, physics
* academia background, ad hoc and one-time analyses
* self-taught programming

### Building business intelligence from scratch
* strong privacy awareness


Background: technologies
================================================================================
type: prompt
### Quick and dirty
* proof of concept
* data exploration
* ad-Hoc analyses
* short reports

**almost exclusively R**

***
### Need for stability
* data parsing & cleaning
* applications (shiny)
* frequent tasks
* regular reports

**make, R, Unix tools, Python**


Background: Challenges
================================================================================
type: prompt
* quickly changing & growing requirements
  * the more we learn & the company grows
* latest features allow fast progress
* rapidly developing packages
* need stability & low maintenance


The arrange() incident
================================================================================
```{r, eval=FALSE}
library(dplyr)
data %>% group_by(col1) %>%  arrange(-col2) %>% ...
data %>%  arrange(-col2) %>% group_by(col1) %>% ...
```

* different results depending on versions & subsequent commands


The collect() incident
================================================================================
```{r, eval=FALSE}
library(RPostgreSQL)
library(dplyr)
con <- src_postgres(db = "mydb")
data <- con %>% tbl("mytbl") %>% collect()
data <- con %>% tbl("mytbl") %>% collect(n = 100000)
data <- con %>% tbl("mytbl") %>% collect(n = Inf)
```

* default was changed to 100k

* it's not in the help of collect()
* there were warning messages and it's in
```{r, eval=FALSE}
dplyr:::collect.tbl_sql
```


The logstash incident
================================================================================
* system unchanged in months
* wanted new feature, updated
* a little used feature wasn't backward compatible
* re-building needed


R update incident
================================================================================
* wanted feature of new package
* incompatible with old R
* unable to update on old ubuntu
* new ubuntu introduces more issues


Chain of repairs
================================================================================
type: alert
<iframe width="700" height="400" src="http://i.imgur.com/rQIb4Vw.mp4" frameborder="0" allowfullscreen></iframe>


Solution approaches
================================================================================
### personal
* set up and never touch again
* just update & see what fails

### professional
* version locking
* reduce dependencies
* images & containers


Version locking
================================================================================
* package [checkpoint](https://cran.r-project.org/web/packages/checkpoint/vignettes/checkpoint.html)
```{r, eval=FALSE}
library(checkpoint)
checkpoint("2017-02-20")
```
* fixed, self-hosted package repository


Reduce dependencies
================================================================================
* modularization with focus on core functionality
  * avoid large collections of utility functions
* fork dependencies at fixed versions into project
* balance between re-inventing the wheel and dependencies
  * never write encryption yourself


Images & containers
================================================================================
* [Vagrant images](https://www.vagrantup.com)
* [Docker containers](https://www.docker.com)
  * framework restrictions for application
* deliver pre-built or creation rules


More advice
================================================================================
### intentional upgrades
* actively search for bugs & anomalies (QA)
  * manual validation
  * unit testing

***
### general
* human discipline, unreliable
* logging, monitoring, alarms
  * especially external APIs
* overwrite defaults


References
================================================================================
* [https://github.com/data-raccoon/talk-reproducible_r](https://github.com/data-raccoon/talk-reproducible_r)

### Presentation
* [Guide: reproducibility in science](http://ropensci.github.io/reproducibility-guide)
* [R User Group (Köln) meetup](https://www.meetup.com/KoelnRUG)
* Your host: [eyeo](https://eyeo.com), [Adblock Plus](https://adblockplus.org), [Flattr](https://flattr.com)

### Tools
* [Using checkpoint for reproducible research](https://cran.r-project.org/web/packages/checkpoint/vignettes/checkpoint.html)
* [Vagrant images](https://www.vagrantup.com)
* [Docker containers](https://www.docker.com)
* [Rpress presentations](https://support.rstudio.com/hc/en-us/articles/200486468-Authoring-R-Presentations)
* [Linux Libertine font family](http://www.linuxlibertine.org)


Your experiences
================================================================================
type: prompt
* Has reproducibility been a topic for you?
* How did you tackle the issue?

